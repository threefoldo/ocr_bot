# AUTOGENERATED! DO NOT EDIT! File to edit: 01-baidu-ocr.ipynb (unless otherwise specified).

__all__ = ['API_KEY', 'SECRET_KEY', 'OCR_URL', 'TOKEN_URL', 'baidu_fetch_token', 'baidu_request', 'baidu_ocr']

# Cell

import cv2
import os
import requests
import json
from base64 import b64encode
import time
from urllib.request import urlopen
from urllib.request import Request
from urllib.error import URLError
from urllib.parse import urlencode
from urllib.parse import quote_plus
import ssl

ssl._create_default_https_context = ssl._create_unverified_context

# Cell

API_KEY = os.environ.get('BAIDU_API_KEY')
SECRET_KEY = os.environ.get('BAIDU_SECRET_KEY')
OCR_URL = "https://aip.baidubce.com/rest/2.0/ocr/v1/accurate"
"""  TOKEN start """
TOKEN_URL = 'https://aip.baidubce.com/oauth/2.0/token'

# Cell

def baidu_fetch_token():
    params = {'grant_type': 'client_credentials',
              'client_id': API_KEY,
              'client_secret': SECRET_KEY}
    post_data = urlencode(params)
    post_data = post_data.encode('utf-8')
    req = Request(TOKEN_URL, post_data)
    try:
        f = urlopen(req, timeout=5)
        result_str = f.read()
    except URLError as err:
        print(err)
    result_str = result_str.decode()
    result = json.loads(result_str)
    if ('access_token' in result.keys() and 'scope' in result.keys()):
        if not 'brain_all_scope' in result['scope'].split(' '):
            print ('please ensure has check the  ability')
            exit()
        return result['access_token']
    else:
        print ('please overwrite the correct API_KEY and SECRET_KEY')

def baidu_request(url, data):
    req = Request(url, data.encode('utf-8'))
    has_error = False
    try:
        f = urlopen(req)
        result_str = f.read()
        result_str = result_str.decode()
        return result_str
    except  URLError as err:
        print(err)

def baidu_ocr(imgdata):
    token = baidu_fetch_token()
    image_url = OCR_URL + "?access_token=" + token
    result = baidu_request(image_url, urlencode({'image': b64encode(imgdata)}))
    result = json.loads(result)
    return result